TreeNode* deleteNode(TreeNode* root, int key) 
    {
        if(root==NULL)
            return NULL;
        else if(root->val==key)
        {
            if(root->left==NULL && root->right==NULL)
            {
                delete root;
                return NULL;
            }
            else if(root->left!=NULL && root->right==NULL)
            {
                TreeNode* temp=root->left;
                delete root;
                return temp;
            }
            else if(root->right!=NULL && root->left==NULL)
            {
                TreeNode* temp=root->right;
                delete root;
                return temp;
            }
            else
            {
                TreeNode* replace=root->right;
                while(replace->left!=NULL)
                    replace=replace->left;
                root->val=replace->val;
                root->right=deleteNode(root->right,root->val);
                return root;
            }
        }
        else if(root->val>key)
        {
            root->left=deleteNode(root->left,key);
            return root;
        }
        else
        {
            root->right=deleteNode(root->right,key);
            return root;
        }
    }
